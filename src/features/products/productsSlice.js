// Import necessary functions and dependencies
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { BASE_URL } from "../../utils/constants";
import { shuffle } from "../../utils/common";

/**
 * Asynchronous Thunk for Fetching Products
 *
 * The `getProducts` async thunk function is used to fetch products data from the server.
 * It sends a GET request to the API endpoint `${BASE_URL}/products` using Axios and returns
 * the response data on success. If an error occurs during the request, it logs the error and
 * returns the error with the `rejectWithValue` method.
 */
export const getProducts = createAsyncThunk(
  "products/getProducts",
  async (_, thunkAPI) => {
    try {
      const res = await axios(`${BASE_URL}/products`);
      return res.data;
    } catch (err) {
      console.log(err);
      return thunkAPI.rejectWithValue(err);
    }
  }
);

/**
 * Products Slice
 *
 * The `productsSlice` is a Redux slice responsible for managing the products state.
 * It defines the initial state with an empty `list` array for products data, a `filtered` array
 * for filtered products data, a `related` array for related products data, and a `isLoading`
 * boolean flag to indicate the loading state during API requests.
 */
const productsSlice = createSlice({
  name: "products",
  initialState: {
    list: [],
    filtered: [],
    related: [],
    isLoading: false,
  },
  // Reducers for handling the asynchronous thunk actions and other state manipulations
  reducers: {
    // Reducer to filter products by price
    filterByPrice: (state, { payload }) => {
      state.filtered = state.list.filter(({ price }) => price < payload);
    },
    // Reducer to get related products for a given category
    getRelatedProducts: (state, { payload }) => {
      const list = state.list.filter(({ category: { id } }) => id === payload);
      state.related = shuffle(list);
    },
  },
  // Reducers for handling the asynchronous thunk actions
  extraReducers: (builder) => {
    builder.addCase(getProducts.pending, (state) => {
      state.isLoading = true;
    });
    builder.addCase(getProducts.fulfilled, (state, { payload }) => {
      state.list = payload;
      state.isLoading = false;
    });
    builder.addCase(getProducts.rejected, (state) => {
      state.isLoading = false;
    });
  },
});

// Export the action creators generated by the productsSlice
export const { filterByPrice, getRelatedProducts } = productsSlice.actions;

// Export the products reducer as the default export
export default productsSlice.reducer;
